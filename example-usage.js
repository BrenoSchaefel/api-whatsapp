/**
 * üìñ EXEMPLO DE USO DA API WHATSAPP COM SEGURAN√áA JWT
 * 
 * Este arquivo demonstra como usar a API de forma segura
 */

const BASE_URL = 'http://localhost:3000';

// ========================================
// üîê PASSO 1: AUTENTICAR E OBTER QR CODE
// ========================================
async function authenticateUser(clientId) {
    console.log(`üîÑ Iniciando autentica√ß√£o para cliente: ${clientId}`);
    
    try {
        const response = await fetch(`${BASE_URL}/auth?id_cliente=${clientId}`);
        const data = await response.json();
        
        if (data.authenticated) {
            console.log('‚úÖ J√° autenticado! Token:', data.token);
            return data.token;
        }
        
        if (data.qr_code && data.session_key) {
            console.log('üì± QR Code gerado! Escaneie com o WhatsApp:');
            console.log(data.qr_code);
            console.log(`üîë Session Key: ${data.session_key}`);
            console.log(`‚è∞ Chave expira em: ${data.key_expires_in}`);
            console.log('\n‚è≥ Aguardando escaneamento...\n');
            
            // Aguarda autentica√ß√£o usando a session key
            return await waitForAuthentication(clientId, data.session_key);
        }
        
    } catch (error) {
        console.error('‚ùå Erro na autentica√ß√£o:', error);
        throw error;
    }
}

// ========================================
// ‚è≥ PASSO 2: AGUARDAR ESCANEAMENTO E OBTER TOKEN
// ========================================
async function waitForAuthentication(clientId, sessionKey, maxAttempts = 30) {
    for (let attempt = 1; attempt <= maxAttempts; attempt++) {
        try {
            console.log(`üîç Tentando obter token... (${attempt}/${maxAttempts})`);
            
            const response = await fetch(`${BASE_URL}/get-token`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    id_cliente: clientId,
                    session_key: sessionKey
                })
            });
            
            const data = await response.json();
            
            if (data.status === 'ok' && data.token) {
                console.log('üéâ Autentica√ß√£o bem-sucedida!');
                console.log('üîë Token JWT obtido:', data.token.substring(0, 50) + '...');
                console.log(`‚è∞ Token v√°lido por: ${data.expires_in}`);
                return data.token;
            }
            
            if (data.status === 'pending') {
                console.log('‚è≥ Aguardando escaneamento do QR Code...');
                // Aguarda 3 segundos antes da pr√≥xima tentativa
                await sleep(3000);
                continue;
            }
            
            if (response.status === 401) {
                throw new Error('üîí Session key inv√°lida ou expirada: ' + data.message);
            }
            
        } catch (error) {
            console.error(`‚ùå Erro na tentativa ${attempt}:`, error.message);
            if (error.message.includes('Session key')) {
                throw error; // Erro fatal, n√£o continuar
            }
        }
    }
    
    throw new Error('‚è∞ Timeout: Autentica√ß√£o n√£o foi conclu√≠da em tempo h√°bil');
}

// ========================================
// üì§ PASSO 3: ENVIAR MENSAGEM (PROTEGIDO)
// ========================================
async function sendMessage(token, to, message) {
    console.log(`üì§ Enviando mensagem para ${to}...`);
    
    try {
        const response = await fetch(`${BASE_URL}/send-message`, {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                to: to,
                message: message
            })
        });
        
        const data = await response.json();
        
        if (response.ok) {
            console.log('‚úÖ Mensagem enviada com sucesso!');
            console.log('üìã Detalhes:', {
                to: data.to,
                message_id: data.message_id,
                cliente: data.id_cliente
            });
            return data;
        } else {
            console.error('‚ùå Erro ao enviar mensagem:', data);
            throw new Error(data.error);
        }
        
    } catch (error) {
        console.error('üí• Erro ao enviar mensagem:', error);
        throw error;
    }
}

// ========================================
// üìä PASSO 4: VERIFICAR STATUS (PROTEGIDO)
// ========================================
async function checkMySession(token) {
    console.log('üìä Verificando status da minha sess√£o...');
    
    try {
        const response = await fetch(`${BASE_URL}/my-sessions`, {
            headers: {
                'Authorization': `Bearer ${token}`
            }
        });
        
        const data = await response.json();
        
        if (response.ok) {
            console.log('‚úÖ Status da sess√£o:', {
                cliente: data.id_cliente,
                conectado: data.session.connected,
                estado: data.session.state
            });
            return data;
        } else {
            console.error('‚ùå Erro ao verificar sess√£o:', data);
            throw new Error(data.error);
        }
        
    } catch (error) {
        console.error('üí• Erro ao verificar sess√£o:', error);
        throw error;
    }
}

// ========================================
// üö´ DEMONSTRA√á√ÉO DE SEGURAN√áA
// ========================================
async function demonstrateSecurity(tokenA, tokenB) {
    console.log('\nüõ°Ô∏è DEMONSTRANDO SEGURAN√áA:\n');
    
    // Tenta usar token do cliente A para acessar dados do cliente B
    console.log('‚ùå Tentando usar token do cliente A para acessar cliente B...');
    
    try {
        // Isso deve falhar!
        const response = await fetch(`${BASE_URL}/send-message`, {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${tokenA}`, // Token do cliente A
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                to: '5511999999999',
                message: 'Mensagem usando token errado'
            })
        });
        
        if (response.ok) {
            console.log('üö® FALHA DE SEGURAN√áA: Token cruzado funcionou!');
        } else {
            console.log('‚úÖ SEGURAN√áA OK: Token s√≥ funciona para o pr√≥prio cliente');
        }
        
    } catch (error) {
        console.log('‚úÖ SEGURAN√áA OK: Acesso negado como esperado');
    }
}

// ========================================
// üéØ FUN√á√ÉO PRINCIPAL
// ========================================
async function main() {
    console.log('üöÄ EXEMPLO DE USO DA API WHATSAPP SEGURA\n');
    
    try {
        // 1. Autenticar cliente A
        const clientA = 'cliente_teste_A';
        const tokenA = await authenticateUser(clientA);
        
        // 2. Enviar mensagem com cliente A
        await sendMessage(tokenA, '5511999999999', 'Ol√°! Esta √© uma mensagem de teste segura!');
        
        // 3. Verificar status da sess√£o
        await checkMySession(tokenA);
        
        console.log('\n‚úÖ Exemplo conclu√≠do com sucesso!');
        console.log('\nüìñ Para usar em produ√ß√£o:');
        console.log('1. Guarde o token de forma segura');
        console.log('2. Reutilize o token por at√© 24h');
        console.log('3. Use HTTPS em produ√ß√£o');
        console.log('4. Defina JWT_SECRET no .env');
        
    } catch (error) {
        console.error('\nüí• Erro no exemplo:', error.message);
    }
}

// ========================================
// üõ†Ô∏è UTILIT√ÅRIOS
// ========================================
function sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}

// ========================================
// üèÉ EXECUTAR EXEMPLO
// ========================================
if (require.main === module) {
    console.log('‚ö†Ô∏è  NOTA: Certifique-se de que o servidor est√° rodando em http://localhost:3000\n');
    main().catch(console.error);
}

module.exports = {
    authenticateUser,
    waitForAuthentication,
    sendMessage,
    checkMySession,
    demonstrateSecurity
};

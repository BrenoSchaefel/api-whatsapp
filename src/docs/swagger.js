const swaggerJsDoc = require("swagger-jsdoc");

const swaggerOptions = {
    definition: {
        openapi: "3.0.0",
        info: {
            title: "üöÄ API WhatsApp Business",
            version: "1.0.0",
            description: `
## üì± API WhatsApp Business - Segura e Simples

Integre aplica√ß√µes com WhatsApp Web de forma segura usando autentica√ß√£o JWT.

### üöÄ Fluxo de Uso

1. **Autenticar** ‚Üí \`GET /auth\` (QR Code + session_key)
2. **Escanear** ‚Üí Use o WhatsApp no celular
3. **Token JWT** ‚Üí \`POST /get-token\` (com session_key)
4. **Enviar** ‚Üí \`POST /send-message\` (com token)

### üîê Seguran√ßa

- **Session Keys** √∫nicas e tempor√°rias (10 min)
- **Tokens JWT** com expira√ß√£o (24h)
- **Isolamento** total entre clientes
- **One-time use** para session keys

### üìù Headers Obrigat√≥rios (Rotas Protegidas)

\`\`\`
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
\`\`\`
            `,
            contact: {
                name: "Suporte API WhatsApp",
                email: "suporte@exemplo.com"
            },
            license: {
                name: "MIT",
                url: "https://opensource.org/licenses/MIT"
            }
        },
        servers: [
            {
                url: "http://localhost:3000",
                description: "Servidor de Desenvolvimento"
            },
            {
                url: "https://api.exemplo.com",
                description: "Servidor de Produ√ß√£o"
            }
        ],
        tags: [
            {
                name: "auth",
                description: "üîê **Autentica√ß√£o**\n\nQR Code e obten√ß√£o de tokens JWT."
            },
            {
                name: "messages", 
                description: "üì§ **Mensagens** (üîí JWT)\n\nEnvio de mensagens e gerenciamento da sess√£o."
            }
        ],
        components: {
            securitySchemes: {
                bearerAuth: {
                    type: "http",
                    scheme: "bearer",
                    bearerFormat: "JWT",
                    description: "Token JWT obtido ap√≥s autentica√ß√£o via QR Code"
                }
            },
            schemas: {
                SessionStatus: {
                    type: "object",
                    properties: {
                        exists: {
                            type: "boolean",
                            description: "Indica se a sess√£o existe na mem√≥ria"
                        },
                        connected: {
                            type: "boolean", 
                            description: "Indica se a sess√£o est√° conectada ao WhatsApp"
                        },
                        state: {
                            type: "string",
                            enum: ["CONNECTED", "DISCONNECTED", "LOADING", "QR_CODE", "AUTHENTICATED", "INITIALIZING", "RESTORING", "AUTH_FAILURE", "ERROR", "NOT_FOUND"],
                            description: "Estado atual da sess√£o"
                        },
                        info: {
                            type: "object",
                            description: "Informa√ß√µes da sess√£o quando conectada (n√∫mero, nome, etc.)"
                        }
                    }
                },
                Error: {
                    type: "object",
                    properties: {
                        error: {
                            type: "string",
                            description: "Mensagem de erro"
                        },
                        details: {
                            type: "string", 
                            description: "Detalhes t√©cnicos do erro"
                        }
                    }
                }
            }
        }
    },
    apis: ["./src/routes/*.js"],
};

module.exports = swaggerJsDoc(swaggerOptions);
